00001C4C Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/19/2021 1:05:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 7 Segment LED 2
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description: This file handles the update and drawing of a 7 segment LED which displays the current score,
00000000                             6  *              and also handles the function calls to detect the end condition for our game
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *Commands
00000000                            10  ALL_DATA_REG reg d0-d7
00000000  =0000000E                 11  PRINT_TEXT_COMMAND equ 14
00000000  =00000050                 12  SET_PEN_COLOR_COMMAND equ 80
00000000  =00000051                 13  SET_FILL_COLOR_COMMAND equ 81
00000000  =00000057                 14  DRAW_RECTANGLE_COMMAND equ 87
00000000                            15  
00000000                            16  *Core attributes to the LED, including coordinates of where segments need to be placed,
00000000                            17  *as well as offsets for accessing the segment table, and the win score.
00000000  =00000014                 18  LEFT_X_COORDINATE2 equ 20
00000000  =0000001E                 19  RIGHT_X_COORDINATE2 equ 30
00000000  =000000C8                 20  TOP_Y_COORDINATE equ 200
00000000  =000000D2                 21  MIDDLE_Y_COORDINATE equ 210
00000000  =000000DC                 22  BOTTOM_Y_COORDINATE equ 220
00000000  =00000006                 23  COORDINATE_OFFSET equ 6
00000000  =0000000F                 24  PRINT_OFFSET equ 15
00000000  =00000005                 25  WIN_SCORE equ 5
00000000                            26  
00000000  =00000039                 27  TEST_NUMBER equ 57   
00000000                            28   
00000000  =00FFFFFF                 29  WHITE equ $00FFFFFF   
00000000                            30  
00000000                            31  *Called every frame of the game loop to check the current score, and draw it to the scren
00000000                            32  updateScore2:
Line 33 ERROR: Undefined symbol
00000000                            33      movem.l ALL_REG, -(sp)
00000000                            34    
00000000  4283                      35      clr.l d3
00000002  4284                      36      clr.l d4
00000004                            37      
00000004                            38      *Load the current score that we need to draw, as well as the tables that hold the 
00000004                            39      *bitmask for our 7 segment LED, and the coordinates for each of the segments
Line 40 ERROR: Undefined symbol
00000004  41F9 004DBD16             40      lea player2Score, a0
0000000A  2A10                      41      move.l (a0), d5
Line 42 ERROR: Undefined symbol
0000000C  41F9 004DBD16             42      lea sevenSegmentTable, a0
00000012  43F9 000000E4             43      lea coordinateTableOffset2, a1
00000018  45F9 000000D6             44      lea coordinateTable2X1, a2
Line 45 ERROR: Undefined symbol
0000001E  47F9 004DBD16             45      lea coordinateTableY1, a3
00000024  49F9 000000DD             46      lea coordinateTable2X2, a4
Line 47 ERROR: Undefined symbol
0000002A  4BF9 004DBD16             47      lea coordinateTableY2, a5
00000030  4DF9 000000E5             48      lea printOffset2, a6
00000036                            49      
00000036                            50  ;d0 - trap codes
00000036                            51  ;d5 - number to print
00000036                            52  ;d6 - single digit to print
00000036                            53  ;d3 - value of segment to print
00000036                            54  ;d4 - AND register  
00000036                            55  *Function called to read the current ones digit of the number we want to print  
00000036                            56  readDigit2:
00000036                            57      *Set value of the coordinate offset used to index segment coordinate table
00000036  12BC 0006                 58      move.b #COORDINATE_OFFSET, (a1)
0000003A                            59      
0000003A                            60      *Divide the current score by 10, then swap to get the remainder
0000003A                            61      *This remainder will give us the one's digit we need to draw
0000003A  8AFC 000A                 62      divu #10, d5
0000003E  4845                      63      swap d5
00000040  3C05                      64      move.w d5, d6
00000042                            65      
00000042                            66      *Using the digit itself as an offset, go into the segment table to find out which number needs to be drawn
00000042  1630 6000                 67      move.b (a0, d6), d3
00000046  2803                      68      move.l d3, d4
00000048                            69  
00000048                            70  *Loop to start the drawing of segments
00000048                            71  loop2:    
00000048                            72      *And 1 to see if the lowest bit is set, to see which segment needs to be drawn
00000048                            73      *If the bit is set to 0, segment must not be drawn, and we must shift down one
00000048  0284 00000001             74      andi.l #1, d4
0000004E  6700 0038                 75      beq shift2
00000052                            76    
00000052                            77  *Loop that actually draws given segment   
00000052                            78  drawSegment2:
00000052  48E7 FF00                 79      movem.l ALL_DATA_REG, -(sp)
00000056                            80      
00000056  7050                      81      move.l #SET_PEN_COLOR_COMMAND, d0
00000058  223C 00FFFFFF             82      move.l #WHITE, d1
0000005E  4E4F                      83      trap #15
00000060                            84      
00000060  4240                      85      clr d0
00000062  4281                      86      clr.l d1
00000064  4282                      87      clr.l d2
00000066  4283                      88      clr.l d3
00000068  4284                      89      clr.l d4
0000006A                            90      
0000006A                            91      *If we reach here, we know which digit to draw, which segment to draw, so get the coordinates of each segment to draw
0000006A                            92      *from the Segment coordinate table
0000006A  1011                      93      move.b (a1), d0
0000006C  1232 0000                 94      move.b (a2, d0), d1
00000070  D216                      95      add.b (a6), d1
00000072  1433 0000                 96      move.b (a3, d0), d2
00000076  1634 0000                 97      move.b (a4, d0), d3
0000007A  D616                      98      add.b (a6), d3
0000007C  1835 0000                 99      move.b (a5, d0), d4
00000080                           100      
00000080  7057                     101      move.l #DRAW_RECTANGLE_COMMAND, d0
00000082  4E4F                     102      trap #15
00000084                           103      
00000084  4CDF 00FF                104      movem.l (sp)+, ALL_DATA_REG
00000088                           105      
00000088                           106  *Function to shift the bitmask to see which segments of digit to draw
00000088                           107  shift2:
00000088                           108      *Shift bitmask by 1 since we didn't draw last segment
00000088  E24B                     109      lsr #1, d3
0000008A                           110      
0000008A                           111      *Check if the value after shift is 0. If so, we're done this digit, so move onto the next one.
0000008A  0C83 00000000            112      cmpi.l #0, d3
00000090  6700 0008                113      beq upperSwap2
00000094                           114      
00000094                           115      *If reach here, we still have segments left to draw
00000094                           116      *Move the current segment back into the reg, and go back to the drawing loop 
00000094  2803                     117      move.l d3, d4
00000096  5311                     118      subi.b #1, (a1)
00000098  60AE                     119      bra loop2  
0000009A                           120   
0000009A                           121  *Function to swap the upper and lower words of the number we wish to draw   
0000009A                           122  upperSwap2:
0000009A                           123      *Load the print flag, add 1, and check if the value is 2
0000009A                           124      *If so, we printed all digits, so stop printing the score
0000009A  4DF9 000000E6            125      lea printFlag2, a6
000000A0  5216                     126      addi.b #1, (a6)
000000A2  0C16 0002                127      cmpi.b #2, (a6)
000000A6  6700 001E                128      beq stopPrinting2
000000AA                           129      
000000AA                           130      *If we reach here, reset the coordinate offset,
000000AA                           131      *and swap the value in d5, since before we had the ones digit, now we need the tens digit
000000AA  12BC 0006                132      move.b #COORDINATE_OFFSET, (a1)
000000AE  4845                     133      swap d5
000000B0  3C05                     134      move.w d5, d6
000000B2                           135      
000000B2                           136      *Set the offset for printing the tens digit, since the tens digit needs to be offset to the left of the ones digit
000000B2  4DF9 000000E5            137      lea printOffset2, a6
000000B8  0416 000F                138      subi.b #PRINT_OFFSET, (a6)
000000BC                           139         
000000BC  1630 6000                140      move.b (a0, d6), d3
000000C0  2803                     141      move.l d3, d4
Line 142 ERROR: Undefined symbol
000000C2  6000 BC52                142      bra loop
000000C6                           143   
000000C6                           144  *Function to stop printing the score   
000000C6                           145  stopPrinting2:
000000C6                           146      *Reset the print offset, and return 
000000C6  1CBC 0000                147      move.b #0, (a6)
000000CA  4DF9 000000E5            148      lea printOffset2, a6
000000D0  1CBC 0000                149      move.b #0, (a6)
000000D4                           150      
Line 151 ERROR: Undefined symbol
000000D4                           151      movem.l (sp)+,ALL_REG
000000D4  4E75                     152      rts
000000D6                           153  
000000D6                           154      
000000D6                           155  
000000D6                           156  *Tables to hold each X and Y coordinate for each induvidual segment
000000D6                           157  *This table is also indexed to match the value of each digit
000000D6= 14                       158  coordinateTable2X1: dc.b LEFT_X_COORDINATE2    ;A
000000D7= 1E                       159                      dc.b RIGHT_X_COORDINATE2   ;B
000000D8= 1E                       160                      dc.b RIGHT_X_COORDINATE2  ;C
000000D9= 14                       161                      dc.b LEFT_X_COORDINATE2    ;D
000000DA= 14                       162                      dc.b LEFT_X_COORDINATE2    ;E
000000DB= 14                       163                      dc.b LEFT_X_COORDINATE2    ;F
000000DC= 14                       164                      dc.b LEFT_X_COORDINATE2    ;G 
000000DD                           165     
000000DD                           166  
000000DD= 1E                       167  coordinateTable2X2: dc.b RIGHT_X_COORDINATE2   ;A
000000DE= 1E                       168                      dc.b RIGHT_X_COORDINATE2   ;B
000000DF= 1E                       169                      dc.b RIGHT_X_COORDINATE2   ;C
000000E0= 1E                       170                      dc.b RIGHT_X_COORDINATE2   ;D
000000E1= 14                       171                      dc.b LEFT_X_COORDINATE2    ;E
000000E2= 14                       172                      dc.b LEFT_X_COORDINATE2    ;F
000000E3= 1E                       173                      dc.b RIGHT_X_COORDINATE2   ;G
000000E4                           174  
000000E4                           175  
000000E4                           176  *Offset for indexing the segment coordinate table
000000E4= 06                       177  coordinateTableOffset2 dc.b 6
000000E5                           178  
000000E5                           179  *Offset for printing the tens digit
000000E5= 00                       180  printOffset2 dc.b 0
000000E6                           181  
000000E6                           182  *Flag for determining if we finished printing
000000E6= 00                       183  printFlag2 dc.b 0
000000E7                           184  
000000E7                           185  
000000E7                           186  
000000E7                           187  
000000E7                           188  
000000E7                           189  
000000E7                           190  
000000E7                           191  
000000E7                           192  
000000E7                           193  
000000E7                           194  
Line 195 WARNING: END directive missing, starting address not set

7 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_DATA_REG        FF
BOTTOM_Y_COORDINATE  DC
COORDINATETABLE2X1  D6
COORDINATETABLE2X2  DD
COORDINATETABLEOFFSET2  E4
COORDINATE_OFFSET   6
DRAWSEGMENT2        52
DRAW_RECTANGLE_COMMAND  57
LEFT_X_COORDINATE2  14
LOOP2               48
MIDDLE_Y_COORDINATE  D2
PRINTFLAG2          E6
PRINTOFFSET2        E5
PRINT_OFFSET        F
PRINT_TEXT_COMMAND  E
READDIGIT2          36
RIGHT_X_COORDINATE2  1E
SET_FILL_COLOR_COMMAND  51
SET_PEN_COLOR_COMMAND  50
SHIFT2              88
STOPPRINTING2       C6
TEST_NUMBER         39
TOP_Y_COORDINATE    C8
UPDATESCORE2        0
UPPERSWAP2          9A
WHITE               FFFFFF
WIN_SCORE           5
