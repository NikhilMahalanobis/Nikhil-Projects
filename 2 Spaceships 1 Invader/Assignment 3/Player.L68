00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/19/2021 11:45:10 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Player
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:This file handles all of the input, updating, and drawing of the Player entity for the game
00000000                             6  *             The player can move left and right (but not off screen), and can press space to shoot a bullet.
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *COMMANDS 
00000000  =00000050                 10  SET_PEN_COLOR_COMMAND equ 80
00000000  =00000051                 11  SET_FILL_COLOR_COMMAND equ 81
00000000  =00000057                 12  DRAW_RECTANGLE_COMMAND equ 87
00000000  =00000013                 13  GET_USER_INPUT_COMMAND equ 19
00000000                            14  
00000000                            15  *The core attributes of the player to help draw them to the screen, and initialize their starting position
00000000  =00000014                 16  PLAYER_WIDTH equ 20
00000000  =00000014                 17  PLAYER_HEIGHT equ 20
00000000  =0001B350                 18  PLAYER_TOP_Y_POSITION equ 111440
00000000  =00000028                 19  PLAYER_STARTING_X_POSITION equ 40
00000000  =0000001E                 20  PLAYER_RIGHT_VELOCITY equ 30
00000000  =FFFFFFE2                 21  PLAYER_LEFT_VELOCITY equ -30
00000000  =00000280                 22  RIGHT_SIDE_OF_SCREEN equ 640
00000000                            23  
00000000  =00FFFFFF                 24  WHITE equ $00FFFFFF
00000000                            25  
00000000                            26  *Initialize the Player before the gameLoop is called
00000000                            27  initPlayer
00000000                            28      *init x position
00000000  7E28                      29      move.l #PLAYER_STARTING_X_POSITION, d7
00000002                            30      
00000002                            31      *set ball y position and height
00000002  243C 01B35000             32      move.l #PLAYER_TOP_Y_POSITION<<8, d2
00000008  2802                      33      move.l d2, d4
0000000A  0684 00000014             34      add.l #PLAYER_HEIGHT, d4
00000010                            35      
00000010                            36      *init the number of bullets to 0 since we don't have any yet
00000010  43F9 0000014E             37      lea numBullets, a1
00000016  22BC 00000000             38      move.l #0, (a1)
0000001C                            39  
0000001C  4E75                      40      rts
0000001E                            41  
0000001E                            42  *Called every frame in the game loop, used to get input from the player which updates the position, OR shoots a bullet depending on the key press    
0000001E                            43  updatePlayer: 
0000001E                            44      *If the player presses the 'D' key, call the function to move player object right
0000001E  7244                      45      move.l #'D', d1
00000020  103C 0013                 46      move.b #GET_USER_INPUT_COMMAND, d0
00000024  4E4F                      47      trap #15
00000026  2A01                      48      move.l d1, d5
00000028  0285 000000FF             49      andi.l #$FF, d5
0000002E  6600 0040                 50      bne dPressed
00000032                            51      
00000032                            52      *If the player presses the 'A' key, call the function to move player object left
00000032  7241                      53      move.l #'A', d1
00000034  103C 0013                 54      move.b #GET_USER_INPUT_COMMAND, d0
00000038  4E4F                      55      trap #15
0000003A  2A01                      56      move.l d1, d5
0000003C  0285 000000FF             57      andi.l #$FF, d5
00000042  6600 003C                 58      bne aPressed
00000046                            59      
00000046                            60      *Check to see if space was already pressed the previous frame before. If it was, don't detect input from space this iteration of the update
00000046                            61      *This is because when a button is pressed, Easy68K detects the input for multiple frames, so the bullets were getting spammed too much
00000046                            62      *This gets rid of the spam issue, and forces the user to shoot 1 bullet at a given time
00000046  4241                      63      clr d1
00000048  43F9 0000014E             64      lea numBullets, a1
0000004E  2211                      65      move.l (a1), d1
00000050  0C81 00000001             66      cmpi.l #1, d1
00000056  6700 008E                 67      beq return
0000005A                            68     
0000005A                            69      *If the player presses 'Space', call function to shoot bullet
0000005A  7220                      70      move.l #$20, d1
0000005C  103C 0013                 71      move.b #GET_USER_INPUT_COMMAND, d0
00000060  4E4F                      72      trap #15
00000062  2A01                      73      move.l d1, d5
00000064  0285 000000FF             74      andi.l #$FF, d5
0000006A  6600 0024                 75      bne spacePressed
0000006E                            76      
0000006E  4E75                      77      rts
00000070                            78      
00000070                            79  *Called if player presses 'D'
00000070                            80  dPressed:
00000070                            81      *Add right velocity to the current player position to get the new position
00000070  7C1E                      82      move.l #PLAYER_RIGHT_VELOCITY, d6
00000072  DE86                      83      add.l d6, d7
00000074                            84      
00000074                            85      *Compare the new position to our screen bounds. If it's too big, we have to undo the last addition we made
00000074  0C87 00026C00             86      cmpi.l #(RIGHT_SIDE_OF_SCREEN-PLAYER_WIDTH)<<8, d7
0000007A  6C00 005A                 87      bge subtractOne
0000007E  4E75                      88      rts
00000080                            89  
00000080                            90  *Called if player presses 'A'
00000080                            91  aPressed:
00000080                            92      *Add left velocity to current player position to get new position
00000080  7CE2                      93      move.l #PLAYER_LEFT_VELOCITY, d6
00000082  DE86                      94      add.l d6, d7
00000084                            95      
00000084                            96      *Compare new position to screen bounds. If it's too small, undo the last addition we made
00000084  0C87 00000028             97      cmpi.l #PLAYER_STARTING_X_POSITION, d7
0000008A  6F00 0052                 98      ble addOne
0000008E  4E75                      99      rts
00000090                           100  
00000090                           101  *Called if player presses 'Space'    
00000090                           102  spacePressed:
00000090                           103      *Load the bullet's coordinate table, the number of bullets, and the bulletActive flag
00000090  43F9 00000152            104      lea bulletTableX1, a1
00000096  45F9 000001F2            105      lea bulletTableY1, a2
0000009C  47F9 000001A2            106      lea bulletTableX2, a3
000000A2  49F9 00000242            107      lea bulletTableY2, a4
000000A8  4BF9 0000014E            108      lea numBullets, a5
000000AE  4DF9 00000292            109      lea bulletActive, a6
000000B4                           110      
000000B4                           111      ;Shift to get the X coordinate of the player, which is used to init the X coordinate of the bullet when fired
000000B4  2207                     112      move.l d7, d1
000000B6  E081                     113      asr.l #8, d1
000000B8  2601                     114      move.l d1, d3
000000BA  0683 00000014            115      add.l #PLAYER_WIDTH, d3
000000C0                           116      
000000C0                           117      ;Move the players current position to the Bullet Coordinate tables, so we can init the bullet position relative to the player
000000C0  22C1                     118      move.l d1, (a1)+
000000C2  24C2                     119      move.l d2, (a2)+
000000C4  26C3                     120      move.l d3, (a3)+
000000C6  28C4                     121      move.l d4, (a4)+
000000C8                           122      
000000C8                           123      ;Add 1 to number of bullets
000000C8  2C15                     124      move.l (a5), d6
000000CA  5286                     125      addi.l #1, d6
000000CC  2A86                     126      move.l d6, (a5)
000000CE                           127      
000000CE                           128      ;Change value of bulletActive flag so we know we're firing a shot
000000CE  2CBC 00000001            129      move.l #1, (a6)
000000D4                           130      
000000D4  4E75                     131      rts
000000D6                           132  
000000D6                           133  *Called to prevent going too far right off screen
000000D6                           134  subtractOne:
000000D6  0487 0000001E            135      subi.l #PLAYER_RIGHT_VELOCITY, d7
000000DC  4E75                     136      rts
000000DE                           137  *Called to rpevent going too far left off screen
000000DE                           138  addOne:
000000DE  0687 0000001E            139      addi.l #-PLAYER_LEFT_VELOCITY, d7
000000E4  4E75                     140      rts
000000E6                           141  *Do nothing and return
000000E6                           142  return:
000000E6  4E75                     143      rts
000000E8                           144  
000000E8                           145  *Using the updated coordinates from the update function, draw the player at their current position  
000000E8                           146  drawPlayer:
000000E8  223C 00FFFFFF            147      move.l #WHITE, d1
000000EE  103C 0050                148      move.b #SET_PEN_COLOR_COMMAND, d0
000000F2  4E4F                     149      trap #15
000000F4  103C 0051                150      move.b #SET_FILL_COLOR_COMMAND, d0
000000F8  4E4F                     151      trap #15
000000FA  103C 0057                152      move.b #DRAW_RECTANGLE_COMMAND, d0
000000FE                           153      
000000FE                           154      *Shift to get the value of the X coordinates since we're using fixed point math
000000FE  2207                     155      move.l d7, d1
00000100  E081                     156      asr.l #8, d1
00000102  2601                     157      move.l d1, d3
00000104  0683 00000014            158      add.l #PLAYER_WIDTH, d3
0000010A                           159      
0000010A                           160      *Shift to get the value of the Y coordinates since we're using fixed point math
0000010A  E082                     161      asr.l #8, d2
0000010C  2802                     162      move.l d2, d4
0000010E  0684 00000014            163      add.l #PLAYER_HEIGHT, d4
00000114  4E4F                     164      trap #15
00000116                           165      
00000116                           166      *Reset the players Y position
00000116  243C 0001B350            167      move.l #PLAYER_TOP_Y_POSITION,d2
0000011C                           168      
0000011C                           169      *Store the value of the current position of player in table
0000011C  43F9 0000013E            170      lea playerX1, a1
00000122  45F9 00000142            171      lea playerX2, a2
00000128  47F9 00000146            172      lea playerY1, a3
0000012E  49F9 0000014A            173      lea playerY2, a4
00000134  2281                     174      move.l d1, (a1)
00000136  2483                     175      move.l d3, (a2)
00000138  2682                     176      move.l d2, (a3)
0000013A  2884                     177      move.l d4, (a4)
0000013C                           178     
0000013C  4E75                     179      rts
0000013E                           180  
0000013E                           181  *Holds the respective coordinates of current player position
0000013E                           182  playerX1 ds.l 1
00000142                           183  playerX2 ds.l 1
00000146                           184  playerY1 ds.l 1
0000014A                           185  playerY2 ds.l 1
0000014E                           186  
0000014E                           187  *Number of active bullets
0000014E                           188  numBullets ds.l 1
00000152                           189  
00000152                           190  *Table to hold the value of the position of the bullet
00000152                           191  bulletTableX1 ds.l 20
000001A2                           192  bulletTableX2 ds.l 20
000001F2                           193  bulletTableY1 ds.l 20
00000242                           194  bulletTableY2 ds.l 20 
00000292                           195  
00000292                           196  *Flag to tell if we have a bullet being fired or not
00000292= 00000000                 197  bulletActive dc.l 0
00000296                           198  
00000296                           199  
00000296                           200  
00000296                           201  
00000296                           202  
00000296                           203  
00000296                           204  
00000296                           205  
00000296                           206  
00000296                           207  
00000296                           208  
00000296                           209  
00000296                           210  
00000296                           211  
00000296                           212  
Line 213 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDONE              DE
APRESSED            80
BULLETACTIVE        292
BULLETTABLEX1       152
BULLETTABLEX2       1A2
BULLETTABLEY1       1F2
BULLETTABLEY2       242
DPRESSED            70
DRAWPLAYER          E8
DRAW_RECTANGLE_COMMAND  57
GET_USER_INPUT_COMMAND  13
INITPLAYER          0
NUMBULLETS          14E
PLAYERX1            13E
PLAYERX2            142
PLAYERY1            146
PLAYERY2            14A
PLAYER_HEIGHT       14
PLAYER_LEFT_VELOCITY  FFFFFFE2
PLAYER_RIGHT_VELOCITY  1E
PLAYER_STARTING_X_POSITION  28
PLAYER_TOP_Y_POSITION  1B350
PLAYER_WIDTH        14
RETURN              E6
RIGHT_SIDE_OF_SCREEN  280
SET_FILL_COLOR_COMMAND  51
SET_PEN_COLOR_COMMAND  50
SPACEPRESSED        90
SUBTRACTONE         D6
UPDATEPLAYER        1E
WHITE               FFFFFF
