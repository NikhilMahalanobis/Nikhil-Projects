00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/19/2021 2:24:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 7 Segment LED
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description: This file handles the update and drawing of a 7 segment LED which displays the current score,
00000000                             6  *              and also handles the function calls to detect the end condition for our game
00000000                             7  *-----------------------------------------------------------
00000000                             8  
00000000                             9  *Commands
00000000                            10  ALL_DATA_REG reg d0-d7
00000000  =0000000E                 11  PRINT_TEXT_COMMAND equ 14
00000000  =00000050                 12  SET_PEN_COLOR_COMMAND equ 80
00000000  =00000051                 13  SET_FILL_COLOR_COMMAND equ 81
00000000  =00000057                 14  DRAW_RECTANGLE_COMMAND equ 87
00000000                            15  
00000000                            16  *Core attributes to the LED, including coordinates of where segments need to be placed,
00000000                            17  *as well as offsets for accessing the segment table, and the win score.
00000000  =00000014                 18  LEFT_X_COORDINATE equ 20
00000000  =0000001E                 19  RIGHT_X_COORDINATE equ 30
00000000  =0000001E                 20  TOP_Y_COORDINATE equ 30
00000000  =00000028                 21  MIDDLE_Y_COORDINATE equ 40
00000000  =00000032                 22  BOTTOM_Y_COORDINATE equ 50
00000000  =00000006                 23  COORDINATE_OFFSET equ 6
00000000  =0000000F                 24  PRINT_OFFSET equ 15
00000000  =00000005                 25  WIN_SCORE equ 5
00000000                            26  
00000000  =00000039                 27  TEST_NUMBER equ 57   
00000000                            28   
00000000  =00FFFFFF                 29  WHITE equ $00FFFFFF   
00000000                            30  
00000000                            31  *Called every frame of the game loop to check the current score, and draw it to the scren
00000000                            32  updateScore:
Line 33 ERROR: Undefined symbol
00000000                            33      movem.l ALL_REG, -(sp)
00000000                            34    
00000000  4283                      35      clr.l d3
00000002  4284                      36      clr.l d4
00000004                            37      
00000004                            38      *Load the current score that we need to draw, as well as the tables that hold the 
00000004                            39      *bitmask for our 7 segment LED, and the coordinates for each of the segments
Line 40 ERROR: Undefined symbol
00000004  41F9 004DBD16             40      lea player1Score, a0
0000000A  2A10                      41      move.l (a0), d5
0000000C  41F9 00000108             42      lea sevenSegmentTable, a0
00000012  43F9 0000012E             43      lea coordinateTableOffset, a1
00000018  45F9 00000112             44      lea coordinateTableX1, a2
0000001E  47F9 00000120             45      lea coordinateTableY1, a3
00000024  49F9 00000119             46      lea coordinateTableX2, a4
0000002A  4BF9 00000127             47      lea coordinateTableY2, a5
00000030  4DF9 0000012F             48      lea printOffset, a6
00000036                            49      
00000036                            50  ;d0 - trap codes
00000036                            51  ;d5 - number to print
00000036                            52  ;d6 - single digit to print
00000036                            53  ;d3 - value of segment to print
00000036                            54  ;d4 - AND register  
00000036                            55  *Function called to read the current ones digit of the number we want to print  
00000036                            56  readDigit:
00000036                            57      *Set value of the coordinate offset used to index segment coordinate table
00000036  12BC 0006                 58      move.b #COORDINATE_OFFSET, (a1)
0000003A                            59      
0000003A                            60      *Divide the current score by 10, then swap to get the remainder
0000003A                            61      *This remainder will give us the one's digit we need to draw
0000003A  8AFC 000A                 62      divu #10, d5
0000003E  4845                      63      swap d5
00000040  3C05                      64      move.w d5, d6
00000042                            65      
00000042                            66      *Using the digit itself as an offset, go into the segment table to find out which number needs to be drawn
00000042  1630 6000                 67      move.b (a0, d6), d3
00000046  2803                      68      move.l d3, d4
00000048                            69  
00000048                            70  *Loop to start the drawing of segments
00000048                            71  loop:    
00000048                            72      *And 1 to see if the lowest bit is set, to see which segment needs to be drawn
00000048                            73      *If the bit is set to 0, segment must not be drawn, and we must shift down one
00000048  0284 00000001             74      andi.l #1, d4
0000004E  6700 0038                 75      beq shift
00000052                            76    
00000052                            77  *Loop that actually draws given segment   
00000052                            78  drawSegment:
00000052  48E7 FF00                 79      movem.l ALL_DATA_REG, -(sp)
00000056                            80      
00000056  7050                      81      move.l #SET_PEN_COLOR_COMMAND, d0
00000058  223C 00FFFFFF             82      move.l #WHITE, d1
0000005E  4E4F                      83      trap #15
00000060                            84      
00000060  4240                      85      clr d0
00000062  4281                      86      clr.l d1
00000064  4282                      87      clr.l d2
00000066  4283                      88      clr.l d3
00000068  4284                      89      clr.l d4
0000006A                            90      
0000006A                            91      *If we reach here, we know which digit to draw, which segment to draw, so get the coordinates of each segment to draw
0000006A                            92      *from the Segment coordinate table
0000006A  1011                      93      move.b (a1), d0
0000006C  1232 0000                 94      move.b (a2, d0), d1
00000070  D216                      95      add.b (a6), d1
00000072  1433 0000                 96      move.b (a3, d0), d2
00000076  1634 0000                 97      move.b (a4, d0), d3
0000007A  D616                      98      add.b (a6), d3
0000007C  1835 0000                 99      move.b (a5, d0), d4
00000080                           100      
00000080  7057                     101      move.l #DRAW_RECTANGLE_COMMAND, d0
00000082  4E4F                     102      trap #15
00000084                           103      
00000084  4CDF 00FF                104      movem.l (sp)+, ALL_DATA_REG
00000088                           105      
00000088                           106  *Function to shift the bitmask to see which segments of digit to draw
00000088                           107  shift:
00000088                           108      *Shift bitmask by 1 since we didn't draw last segment
00000088  E24B                     109      lsr #1, d3
0000008A                           110      
0000008A                           111      *Check if the value after shift is 0. If so, we're done this digit, so move onto the next one.
0000008A  0C83 00000000            112      cmpi.l #0, d3
00000090  6700 0008                113      beq upperSwap
00000094                           114      
00000094                           115      *If reach here, we still have segments left to draw
00000094                           116      *Move the current segment back into the reg, and go back to the drawing loop 
00000094  2803                     117      move.l d3, d4
00000096  5311                     118      subi.b #1, (a1)
00000098  60AE                     119      bra loop  
0000009A                           120   
0000009A                           121  *Function to swap the upper and lower words of the number we wish to draw   
0000009A                           122  upperSwap:
0000009A                           123      *Load the print flag, add 1, and check if the value is 2
0000009A                           124      *If so, we printed all digits, so stop printing the score
0000009A  4DF9 00000130            125      lea printFlag, a6
000000A0  5216                     126      addi.b #1, (a6)
000000A2  0C16 0002                127      cmpi.b #2, (a6)
000000A6  6700 001C                128      beq stopPrinting
000000AA                           129      
000000AA                           130      *If we reach here, reset the coordinate offset,
000000AA                           131      *and swap the value in d5, since before we had the ones digit, now we need the tens digit
000000AA  12BC 0006                132      move.b #COORDINATE_OFFSET, (a1)
000000AE  4845                     133      swap d5
000000B0  3C05                     134      move.w d5, d6
000000B2                           135      
000000B2                           136      *Set the offset for printing the tens digit, since the tens digit needs to be offset to the left of the ones digit
000000B2  4DF9 0000012F            137      lea printOffset, a6
000000B8  0416 000F                138      subi.b #PRINT_OFFSET, (a6)
000000BC                           139         
000000BC  1630 6000                140      move.b (a0, d6), d3
000000C0  2803                     141      move.l d3, d4
000000C2  6084                     142      bra loop
000000C4                           143   
000000C4                           144  *Function to stop printing the score   
000000C4                           145  stopPrinting:
000000C4                           146      *Reset the print offset, and return 
000000C4  1CBC 0000                147      move.b #0, (a6)
000000C8  4DF9 0000012F            148      lea printOffset, a6
000000CE  1CBC 0000                149      move.b #0, (a6)
000000D2                           150      
Line 151 ERROR: Undefined symbol
000000D2                           151      movem.l (sp)+,ALL_REG
000000D2  4E75                     152      rts
000000D4                           153  
000000D4                           154  *Function to check score to see if player has set win condition
000000D4                           155  checkP1WinScore:
Line 156 ERROR: Undefined symbol
000000D4                           156      movem.l ALL_REG, -(sp)
000000D4                           157      
Line 158 ERROR: Undefined symbol
000000D4  41F9 004DBD16            158      lea player1Score, a0
000000DA  0C90 00000005            159      cmpi.l #WIN_SCORE, (a0)
000000E0                           160      
Line 161 ERROR: Undefined symbol
000000E0                           161      movem.l (sp)+, ALL_REG 
000000E0  4E75                     162      rts
000000E2                           163  
000000E2                           164  *Function to check score to see if player has set lose condition
000000E2                           165  checkP2WinScore:
Line 166 ERROR: Undefined symbol
000000E2                           166      movem.l ALL_REG, -(sp)
000000E2                           167      
Line 168 ERROR: Undefined symbol
000000E2  41F9 004DBD16            168      lea player2Score, a0
000000E8  0C90 00000005            169      cmpi.l #WIN_SCORE, (a0)
000000EE                           170      
Line 171 ERROR: Undefined symbol
000000EE                           171      movem.l (sp)+, ALL_REG
000000EE  4E75                     172      rts
000000F0                           173     
000000F0                           174  *Function to print win message to screen if the player wins. 
000000F0                           175  printP1ScreenWin:
000000F0                           176      
000000F0  43F9 00000131            177      lea player1String, a1
000000F6  700E                     178      move.l #PRINT_TEXT_COMMAND, d0
000000F8  4E4F                     179      trap #15
000000FA                           180      
000000FA  4E75                     181      rts
000000FC                           182         
000000FC                           183  *Function to print lose message to screen if the player loses.
000000FC                           184  printP2ScreenWin:
000000FC  43F9 00000140            185      lea player2String, a1
00000102  700E                     186      move.l #PRINT_TEXT_COMMAND, d0
00000104  4E4F                     187      trap #15
00000106                           188      
00000106  4E75                     189      rts
00000108                           190      
00000108                           191  *Table that holds the equivalent hex values of the binary bitmasks that make up each digit
00000108                           192  *Values gotten from class lecturn, then calculated 
00000108                           193  *Table indexed so the digit to draw is also the index of the bitmask value
00000108= 7E                       194  sevenSegmentTable:  dc.b $7E    ;0 = ABCDEF = 7E
00000109= 30                       195                      dc.b $30    ;1 = BC = 30
0000010A= 6D                       196                      dc.b $6D    ;2 = ABDEG = 6D
0000010B= 79                       197                      dc.b $79    ;3 = ABCDG = 79
0000010C= 33                       198                      dc.b $33    ;4 = BCFG = 33
0000010D= 5B                       199                      dc.b $5B    ;5 = ACDFG = 5B
0000010E= 5F                       200                      dc.b $5F    ;6 = ACDEFG = 5F
0000010F= 70                       201                      dc.b $70    ;7 = ABC = 70
00000110= 7F                       202                      dc.b $7F    ;8 = ABCDEFG = 7F
00000111= 7B                       203                      dc.b $7B    ;9 = ABCDFG = 7B
00000112                           204      
00000112                           205  
00000112                           206  *Tables to hold each X and Y coordinate for each induvidual segment
00000112                           207  *This table is also indexed to match the value of each digit
00000112= 14                       208  coordinateTableX1:  dc.b LEFT_X_COORDINATE    ;A
00000113= 1E                       209                      dc.b RIGHT_X_COORDINATE   ;B
00000114= 1E                       210                      dc.b RIGHT_X_COORDINATE   ;C
00000115= 14                       211                      dc.b LEFT_X_COORDINATE    ;D
00000116= 14                       212                      dc.b LEFT_X_COORDINATE    ;E
00000117= 14                       213                      dc.b LEFT_X_COORDINATE    ;F
00000118= 14                       214                      dc.b LEFT_X_COORDINATE    ;G 
00000119                           215     
00000119                           216  
00000119= 1E                       217  coordinateTableX2:  dc.b RIGHT_X_COORDINATE   ;A
0000011A= 1E                       218                      dc.b RIGHT_X_COORDINATE   ;B
0000011B= 1E                       219                      dc.b RIGHT_X_COORDINATE   ;C
0000011C= 1E                       220                      dc.b RIGHT_X_COORDINATE   ;D
0000011D= 14                       221                      dc.b LEFT_X_COORDINATE    ;E
0000011E= 14                       222                      dc.b LEFT_X_COORDINATE    ;F
0000011F= 1E                       223                      dc.b RIGHT_X_COORDINATE   ;G
00000120                           224  
00000120= 1E                       225  coordinateTableY1:  dc.b TOP_Y_COORDINATE     ;A
00000121= 1E                       226                      dc.b TOP_Y_COORDINATE     ;B
00000122= 28                       227                      dc.b MIDDLE_Y_COORDINATE  ;C
00000123= 32                       228                      dc.b BOTTOM_Y_COORDINATE  ;D
00000124= 32                       229                      dc.b BOTTOM_Y_COORDINATE  ;E
00000125= 28                       230                      dc.b MIDDLE_Y_COORDINATE  ;F
00000126= 28                       231                      dc.b MIDDLE_Y_COORDINATE  ;G
00000127                           232  
00000127= 1E                       233  coordinateTableY2:  dc.b TOP_Y_COORDINATE     ;A
00000128= 28                       234                      dc.b MIDDLE_Y_COORDINATE  ;B
00000129= 32                       235                      dc.b BOTTOM_Y_COORDINATE  ;C
0000012A= 32                       236                      dc.b BOTTOM_Y_COORDINATE  ;D
0000012B= 28                       237                      dc.b MIDDLE_Y_COORDINATE  ;E
0000012C= 1E                       238                      dc.b TOP_Y_COORDINATE     ;F
0000012D= 28                       239                      dc.b MIDDLE_Y_COORDINATE  ;G  
0000012E                           240  
0000012E                           241  *Offset for indexing the segment coordinate table
0000012E= 06                       242  coordinateTableOffset dc.b 6
0000012F                           243  
0000012F                           244  *Offset for printing the tens digit
0000012F= 00                       245  printOffset dc.b 0
00000130                           246  
00000130                           247  *Flag for determining if we finished printing
00000130= 00                       248  printFlag dc.b 0
00000131                           249  
00000131                           250  *Win screen message
00000131= 50 6C 61 79 65 72 ...    251  player1String dc.b 'Player 1 Wins!',0
00000140                           252  
00000140                           253  *Lose screen message
00000140= 50 6C 61 79 65 72 ...    254  player2String dc.b 'Player 2 Wins!',0
0000014F                           255  
0000014F                           256  
00000150= 00000000                 257  morePadding dc.l 0
00000154                           258  
00000154                           259  
00000154                           260  
00000154                           261  
00000154                           262  
00000154                           263  
Line 264 WARNING: END directive missing, starting address not set

9 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALL_DATA_REG        FF
BOTTOM_Y_COORDINATE  32
CHECKP1WINSCORE     D4
CHECKP2WINSCORE     E2
COORDINATETABLEOFFSET  12E
COORDINATETABLEX1   112
COORDINATETABLEX2   119
COORDINATETABLEY1   120
COORDINATETABLEY2   127
COORDINATE_OFFSET   6
DRAWSEGMENT         52
DRAW_RECTANGLE_COMMAND  57
LEFT_X_COORDINATE   14
LOOP                48
MIDDLE_Y_COORDINATE  28
MOREPADDING         150
PLAYER1STRING       131
PLAYER2STRING       140
PRINTFLAG           130
PRINTOFFSET         12F
PRINTP1SCREENWIN    F0
PRINTP2SCREENWIN    FC
PRINT_OFFSET        F
PRINT_TEXT_COMMAND  E
READDIGIT           36
RIGHT_X_COORDINATE  1E
SET_FILL_COLOR_COMMAND  51
SET_PEN_COLOR_COMMAND  50
SEVENSEGMENTTABLE   108
SHIFT               88
STOPPRINTING        C4
TEST_NUMBER         39
TOP_Y_COORDINATE    1E
UPDATESCORE         0
UPPERSWAP           9A
WHITE               FFFFFF
WIN_SCORE           5
